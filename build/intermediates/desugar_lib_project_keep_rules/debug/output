-keep class j$.util.concurrent.ConcurrentHashMap$KeySetView
-keep class j$.util.Map { *; }
-keep class j$.util.Set$-CC {
    j$.util.Spliterator $default$spliterator(java.util.Set);
}
-keep class j$.util.function.BiConsumer
-keep class j$.time.LocalDate {
    j$.time.LocalDate plusYears(long);
    j$.time.LocalDate minusYears(long);
    j$.time.LocalDate now();
    j$.time.ZonedDateTime atStartOfDay(j$.time.ZoneId);
}
-keep class j$.util.stream.Collectors {
    j$.util.stream.Collector toList();
}
-keep class j$.util.Iterator$-CC {
    void $default$forEachRemaining(java.util.Iterator, j$.util.function.Consumer);
}
-keep class java.util.function.Predicate
-keep class j$.util.SortedSet$-CC {
    j$.util.Spliterator $default$spliterator(java.util.SortedSet);
}
-keep class j$.lang.Iterable { *; }
-keep class j$.util.function.Predicate { *; }
-keep class j$.util.DesugarDate {
    java.util.Date from(j$.time.Instant);
}
-keep class j$.util.Collection { *; }
-keep class j$.util.function.ToDoubleFunction
-keep class j$.util.concurrent.ConcurrentHashMap {
    java.util.Collection values();
    int hashCode();
    boolean containsKey(java.lang.Object);
    boolean remove(java.lang.Object, java.lang.Object);
    java.lang.Object get(java.lang.Object);
    boolean isEmpty();
    boolean containsValue(java.lang.Object);
    j$.util.concurrent.ConcurrentHashMap$KeySetView keySet();
    void clear();
    java.lang.Object put(java.lang.Object, java.lang.Object);
    int size();
    java.util.Set entrySet();
    java.lang.Object remove(java.lang.Object);
    boolean replace(java.lang.Object, java.lang.Object, java.lang.Object);
    java.util.Set keySet();
    java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
    void <init>();
    boolean equals(java.lang.Object);
    java.util.Enumeration elements();
    void <init>(int);
}
-keep class j$.util.List$-CC {
    j$.util.Spliterator $default$spliterator(java.util.List);
    void $default$sort(java.util.List, java.util.Comparator);
    void $default$replaceAll(java.util.List, j$.util.function.UnaryOperator);
}
-keep class j$.util.DesugarTimeZone {
    java.util.TimeZone getTimeZone(java.lang.String);
}
-keep class j$.time.temporal.TemporalAccessor
-keep class j$.time.ZonedDateTime {
    j$.time.Instant toInstant();
}
-keep class j$.util.function.UnaryOperator
-keep class j$.util.concurrent.ThreadLocalRandom {
    j$.util.concurrent.ThreadLocalRandom current();
}
-keep class j$.time.Instant
-keep class j$.util.Collection$-EL {
    j$.util.stream.Stream stream(java.util.Collection);
    boolean removeIf(java.util.Collection, j$.util.function.Predicate);
}
-keep class j$.util.function.Predicate$-CC {
    j$.util.function.Predicate $default$or(j$.util.function.Predicate, j$.util.function.Predicate);
    j$.util.function.Predicate $default$and(j$.util.function.Predicate, j$.util.function.Predicate);
    j$.util.function.Predicate $default$negate(j$.util.function.Predicate);
}
-keep class j$.util.Map$-EL {
    java.lang.Object computeIfAbsent(java.util.Map, java.lang.Object, j$.util.function.Function);
}
-keep class j$.util.function.ToLongFunction
-keep class j$.util.DesugarCollections {
    java.util.Map synchronizedMap(java.util.Map);
}
-keep class j$.util.stream.Stream {
    j$.util.stream.Stream sorted(java.util.Comparator);
    boolean anyMatch(j$.util.function.Predicate);
    j$.util.stream.Stream map(j$.util.function.Function);
    j$.util.stream.Stream filter(j$.util.function.Predicate);
    j$.util.Optional findFirst();
    java.lang.Object collect(j$.util.stream.Collector);
    j$.util.Optional findAny();
    j$.util.stream.Stream limit(long);
}
-keep class j$.util.function.ToIntFunction
-keep class j$.util.Map$-CC {
    void $default$forEach(java.util.Map, j$.util.function.BiConsumer);
    boolean $default$replace(java.util.Map, java.lang.Object, java.lang.Object, java.lang.Object);
    java.lang.Object $default$computeIfAbsent(java.util.Map, java.lang.Object, j$.util.function.Function);
    java.lang.Object $default$putIfAbsent(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$getOrDefault(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$replace(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$computeIfPresent(java.util.Map, java.lang.Object, j$.util.function.BiFunction);
    java.lang.Object $default$compute(java.util.Map, java.lang.Object, j$.util.function.BiFunction);
    boolean $default$remove(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$merge(java.util.Map, java.lang.Object, java.lang.Object, j$.util.function.BiFunction);
    void $default$replaceAll(java.util.Map, j$.util.function.BiFunction);
}
-keep class j$.util.Optional {
    java.lang.Object get();
    void ifPresent(j$.util.function.Consumer);
    java.lang.Object orElse(java.lang.Object);
    boolean isPresent();
}
-keep class j$.util.function.BiFunction
-keep class j$.time.LocalDateTime {
    j$.time.LocalDateTime now();
}
-keep class j$.util.function.Function$-CC {
    j$.util.function.Function $default$compose(j$.util.function.Function, j$.util.function.Function);
    j$.util.function.Function $default$andThen(j$.util.function.Function, j$.util.function.Function);
}
-keep class j$.util.Collection$-CC {
    j$.util.stream.Stream $default$stream(java.util.Collection);
    boolean $default$removeIf(java.util.Collection, j$.util.function.Predicate);
    j$.util.Spliterator $default$spliterator(java.util.Collection);
    j$.util.stream.Stream $default$parallelStream(java.util.Collection);
}
-keep class j$.util.Map$Entry { *; }
-keep class j$.time.format.DateTimeFormatter {
    j$.time.format.DateTimeFormatter ofPattern(java.lang.String);
    java.lang.String format(j$.time.temporal.TemporalAccessor);
}
-keep class j$.util.Iterator { *; }
-keep class j$.util.SortedSet { *; }
-keep class j$.util.function.Consumer { *; }
-keep class j$.util.function.Consumer$-CC {
    j$.util.function.Consumer $default$andThen(j$.util.function.Consumer, j$.util.function.Consumer);
}
-keep class j$.$r8$wrapper$java$util$function$Predicate$-V-WRP {
    j$.util.function.Predicate convert(java.util.function.Predicate);
}
-keep class j$.util.function.Function { *; }
-keep class j$.util.stream.Collector
-keep class j$.util.List { *; }
-keep class j$.util.Set { *; }
-keep class j$.util.Comparator { *; }
-keep class j$.util.Comparator$-CC {
    java.util.Comparator $default$thenComparingLong(java.util.Comparator, j$.util.function.ToLongFunction);
    java.util.Comparator reverseOrder();
    java.util.Comparator comparing(j$.util.function.Function);
    java.util.Comparator $default$thenComparingDouble(java.util.Comparator, j$.util.function.ToDoubleFunction);
    java.util.Comparator $default$reversed(java.util.Comparator);
    java.util.Comparator $default$thenComparing(java.util.Comparator, j$.util.function.Function, java.util.Comparator);
    java.util.Comparator $default$thenComparing(java.util.Comparator, j$.util.function.Function);
    java.util.Comparator $default$thenComparingInt(java.util.Comparator, j$.util.function.ToIntFunction);
    java.util.Comparator $default$thenComparing(java.util.Comparator, java.util.Comparator);
}
-keep class j$.time.ZoneId {
    j$.time.ZoneId systemDefault();
}
-keep class j$.util.Spliterator
-keep class j$.lang.Iterable$-CC {
    j$.util.Spliterator $default$spliterator(java.lang.Iterable);
    void $default$forEach(java.lang.Iterable, j$.util.function.Consumer);
}
